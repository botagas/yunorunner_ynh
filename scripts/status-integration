
@app.route("/api/badge/<app_name>/status", methods=["GET"])
async def api_status_badge(request, app_name):
    """
    SVG badge for working status (working/broken).
    """
    result_path = (
        yunorunner_dir
        + f"/results/logs/{app_name}_{app.config.ARCH}_{app.config.YNH_BRANCH}_results.json"
    )

    if not os.path.exists(result_path):
        label = "WORKING STATUS"
        message = "UNKNOWN"
        color = "#9f9f9f"
    else:
        with open(result_path, "r") as result_file:
            results = json.load(result_file)
        level = results.get("level", None)

        label = "WORKING STATUS"
        if level is None:
            message = "UNKNOWN"
            color = "#9f9f9f"
        elif level >= 5:
            message = "WORKING"
            color = "#4c1"
        else:
            message = "BROKEN"
            color = "#e05d44"

    label = "WORKING STATUS"
    svg = f'''<svg xmlns="http://www.w3.org/2000/svg" width="180" height="28" role="img" aria-label="{label}: {message}">
      <title>{label}: {message}</title>
      <g shape-rendering="crispEdges">
        <rect width="120" height="28" fill="#555"/>
        <rect x="120" width="60" height="28" fill="{color}"/>
      </g>
      <g fill="#fff" text-anchor="middle" font-family="Verdana,Geneva,DejaVu Sans,sans-serif" text-rendering="geometricPrecision" font-size="95">
        <text transform="scale(.1)" x="600" y="175" textLength="1050" lengthAdjust="spacing">{label}</text>
        <text transform="scale(.1)" x="1500" y="175" textLength="500" font-weight="bold" lengthAdjust="spacing">{message}</text>
      </g>
    </svg>'''

    return response.text(svg, content_type="image/svg+xml")

@app.route("/api/badge/<app_name>/integration", methods=["GET"])
async def api_integration_badge(request, app_name):
    """
    API endpoint for generating a static SVG badge for a given app's test level.
    """
    result_path = (
        yunorunner_dir
        + f"/results/logs/{app_name}_{app.config.ARCH}_{app.config.YNH_BRANCH}_results.json"
    )
    if not os.path.exists(result_path):
        level = "?"
        color = "#9f9f9f"
    else:
        with open(result_path, "r") as result_file:
            results = json.load(result_file)
        level = results.get("level", "?")
        if isinstance(level, int):
            if level >= 8:
                color = "#4c1"
            elif level >= 5:
                color = "#a4a61d"
            elif level >= 3:
                color = "#dfb317"
            else:
                color = "#e05d44"
        else:
            color = "#9f9f9f"

    label = "AUTOMATIC TESTS LEVEL"
    label_width = 180.25
    value_width = 32.25
    total_width = label_width + value_width

    svg = f'''<svg xmlns="http://www.w3.org/2000/svg" width="{total_width}" height="28" role="img" aria-label="{label}: {level}">
  <title>{label}: {level}</title>
  <g shape-rendering="crispEdges">
    <rect width="{label_width}" height="28" fill="#555"/>
    <rect x="{label_width}" width="{value_width}" height="28" fill="{color}"/>
  </g>
  <g fill="#fff" text-anchor="middle" font-family="Verdana,Geneva,DejaVu Sans,sans-serif" text-rendering="geometricPrecision" font-size="100">
    <text transform="scale(.1)" x="{label_width * 5}" y="175" textLength="1562.5">{label}</text>
    <text transform="scale(.1)" x="{(label_width + value_width / 2) * 10}" y="175" textLength="82.5" fill="#fff" font-weight="bold">{level}</text>
  </g>
</svg>'''

    return response.text(svg, content_type="image/svg+xml")
